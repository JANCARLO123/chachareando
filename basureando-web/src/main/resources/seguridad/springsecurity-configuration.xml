<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">


    <!-- This is where we configure Spring-Security -->
    <security:http auto-config="false" use-expressions="true"
                   access-denied-page="/${seguridad.configuracion.invalidSessionUrl}"
                   entry-point-ref="authenticationEntryPoint">

        <security:intercept-url pattern="/inicio*" access="hasRole('ROLE_USER')"/>
        <security:intercept-url pattern="/consulta*" access="hasRole('ROLE_ADMIN')"/>

        <security:custom-filter
                position="CONCURRENT_SESSION_FILTER"
                ref="concurrencyFilter"/>

        <security:custom-filter
                position="FORM_LOGIN_FILTER"
                ref="authenticationFilter"/>

        <security:logout
                invalidate-session="true"
                logout-success-url="/${seguridad.configuracion.logoutSuccessUrl}"
                logout-url="/j_spring_security_logout"/>

    </security:http>


    <bean id="concurrencyFilter"
          class="org.springframework.security.web.session.ConcurrentSessionFilter">
        <property name="sessionRegistry" ref="sessionRegistry"/>
        <property name="expiredUrl" value="/${seguridad.configuracion.invalidSessionUrl}"/>
    </bean>


    <!-- Custom filter for username and password. The real customization is
        done in the customAthenticationManager -->
    <bean
            id="authenticationFilter"
            class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter"
            p:authenticationManager-ref="customAuthenticationManager"
            p:authenticationFailureHandler-ref="customAuthenticationFailureHandler"
            p:authenticationSuccessHandler-ref="customAuthenticationSuccessHandler">

        <property name="sessionAuthenticationStrategy" ref="sas"/>
        <property name="authenticationManager" ref="customAuthenticationManager"/>

    </bean>



    <bean id="sas"
          class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">

        <constructor-arg name="sessionRegistry" ref="sessionRegistry"/>
        <property name="maximumSessions" value="1"/>
        <property name="exceptionIfMaximumExceeded" value="true"/>

    </bean>


    <bean
            id="sessionRegistry"
            class="org.springframework.security.core.session.SessionRegistryImpl"/>


    <!-- Custom authentication manager. In order to authenticate, username and
        password must not be the same -->
    <bean id="customAuthenticationManager" class="doo.daba.java.basureando.security.AccessControl"/>


    <!-- We just actually need to set the default failure url here -->
    <bean id="customAuthenticationFailureHandler"
          class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
          p:defaultFailureUrl="/${seguridad.configuracion.invalidSessionUrl}"/>


    <!-- We just actually need to set the default target url here -->
    <bean id="customAuthenticationSuccessHandler"
          class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler"
          p:defaultTargetUrl="/inicio"/>


    <!-- The AuthenticationEntryPoint is responsible for redirecting the user
        to a particular page, like a login page, whenever the server sends back a
        response requiring authentication -->
    <!-- See Spring-Security Reference 5.4.1 for more info -->
    <bean id="authenticationEntryPoint"
          class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint"
          p:loginFormUrl="/${seguridad.configuracion.loginPage}"/>


    <!-- The tag below has no use but Spring Security needs it to autowire the
        parent property of org.springframework.security.authentication.ProviderManager.
        Otherwise we get an error A probable bug. This is still under investigation -->
    <security:authentication-manager/>

</beans>